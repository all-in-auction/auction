plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'com.googlecode.json-simple:json-simple:1.1'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // jwt
    compileOnly group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    //security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // aws s3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    //Querydsl 추가
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // rabbitMQ
    implementation 'org.springframework.boot:spring-boot-starter-amqp'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // elasticsearch
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    implementation 'org.elasticsearch.client:elasticsearch-rest-high-level-client:7.17.0'

    // data faker
    implementation 'net.datafaker:datafaker:2.4.0'

    implementation 'org.redisson:redisson-spring-boot-starter:3.37.0'

    // elasticsearch
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    implementation 'co.elastic.clients:elasticsearch-java:8.11.1'
//    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.7.1'
    // actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // prometheus
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // logstash
    implementation 'net.logstash.logback:logstash-logback-encoder:8.0'

    //kafka
    implementation 'org.springframework.kafka:spring-kafka'

    implementation 'net.datafaker:datafaker:2.4.0'



    // json 역직렬화
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.core:jackson-databind'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'

}

tasks.named('test') {
    useJUnitPlatform()
}

/**
 * QueryDSL Build Options
 */
def querydslDir = "src/main/generated"
sourceSets {
    main.java.srcDirs += [ querydslDir ]
}
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}
clean.doLast {
    file(querydslDir).deleteDir()
}